1.File Copy: Write a C program to copy a file using file operations
#include <stdio.h>

int main() {
    FILE *sourceFile, *destinationFile;
    char sourcePath[100], destinationPath[100];
    char ch;

    printf("Enter the path of the source file: ");
    scanf("%s", sourcePath);

    // Open the source file in read mode
    sourceFile = fopen(sourcePath, "r");
    if (sourceFile == NULL) {
        printf("Unable to open the source file.\n");
        return 1;
    }

    printf("Enter the path of the destination file: ");
    scanf("%s", destinationPath);

    // Open the destination file in write mode
    destinationFile = fopen(destinationPath, "w");
    if (destinationFile == NULL) {
        printf("Unable to create or write to the destination file.\n");
        fclose(sourceFile);
        return 1;
    }

    // Copy the contents of the source file to the destination file
    while ((ch = fgetc(sourceFile)) != EOF) {
        fputc(ch, destinationFile);
    }

    printf("File copied successfully.\n");

    // Close the files
    fclose(sourceFile);
    fclose(destinationFile);

    return 0;
}

2.Case Handler:
Write a C program to copy a file by considering the user option to handle the text case
-u, to change file content to Upper Case
-l, to change file content to Lower Case
-s, to change file content to Sentence Case
if no options are passed then it should be a normal copy

Example, say we have a file f1 with the following content
f1:
-----------------------
This is the file data
testing Case copy
application
-----------------------

./cp -s f1 f2
f2:
-----------------------
This Is The Tile Data
Testing Case Copy
Application
-----------------------

./cp -l f1 f3
f3:
-----------------------
this is the tile data
testing case copy
application
-----------------------

./cp -u f1 f4
f4:
-----------------------
THIS IS THE FILE DATA
TESTING CASE COPY
APPLICATION
-----------------------

./cp f1 f5
Should perform a normal copy


#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to convert string to upper case
void toUpperCase(char *str) {
    while (*str) {
        *str = toupper((unsigned char)*str);
        str++;
    }
}

// Function to convert string to lower case
void toLowerCase(char *str) {
    while (*str) {
        *str = tolower((unsigned char)*str);
        str++;
    }
}

// Function to convert string to sentence case
void toSentenceCase(char *str) {
    int len = strlen(str);
    if (len > 0) {
        *str = toupper((unsigned char)*str);
        for (int i = 1; i < len; i++) {
            if (*(str + i) == '.' || *(str + i) == '?' || *(str + i) == '!') {
                if (i + 2 < len && *(str + i + 1) == ' ') {
                    *(str + i + 2) = toupper((unsigned char)*(str + i + 2));
                    i += 2;
                }
            }
        }
    }
}

int main(int argc, char *argv[]) {
    if (argc < 3) {
        printf("Insufficient arguments. Usage: ./cp <option> <source_file> <destination_file>\n");
        return 1;
    }

    char *option = argv[1];
    char *sourcePath = argv[2];
    char *destinationPath = argv[3];

    FILE *sourceFile, *destinationFile;
    char ch;

    // Open the source file in read mode
    sourceFile = fopen(sourcePath, "r");
    if (sourceFile == NULL) {
        printf("Unable to open the source file.\n");
        return 1;
    }

    // Open the destination file in write mode
    destinationFile = fopen(destinationPath, "w");
    if (destinationFile == NULL) {
        printf("Unable to create or write to the destination file.\n");
        fclose(sourceFile);
        return 1;
    }

    // Copy the contents of the source file to the destination file with case handling
    while ((ch = fgetc(sourceFile)) != EOF) {
        if (strcmp(option, "-u") == 0) {
            fputc(toupper(ch), destinationFile);
        } else if (strcmp(option, "-l") == 0) {
            fputc(tolower(ch), destinationFile);
        } else if (strcmp(option, "-s") == 0) {
            fputc(ch, destinationFile);
            if (ch == '.' || ch == '?' || ch == '!') {
                ch = fgetc(sourceFile);
                if (ch == ' ')
                    ch = fgetc(sourceFile);
                fputc(toupper(ch), destinationFile);
            }
        } else {
            fputc(ch, destinationFile);
        }
    }

    printf("File copied successfully.\n");

    // Close the files
    fclose(sourceFile);
    fclose(destinationFile);

    return 0;
}

3.Data Viewer:
Write an application to view the log stored in data.csv
Example, say you have the following data in data.csv

------------------------------------

EntryNo,sensorNo,Temperature,Humidity,Light,

1,S1,36.5,100,50,10:30:50
2,S3,30,100,50,10:30:55
3,S2,-6.6,100,10,10:31:00
------------------------------------

a. Write a function to extract each line in the .csv file and store it in an array of structures. 

b. Also implement functions to display the contents of the array of structures.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ENTRIES 100
#define MAX_LINE_LENGTH 100

// Structure to hold log entry data
typedef struct {
    int entryNo;
    char sensorNo[10];
    float temperature;
    int humidity;
    int light;
    char timestamp[9];
} LogEntry;

// Function to extract each line from the CSV file and store it in an array of structures
int extractDataFromFile(LogEntry logEntries[]) {
    FILE *file = fopen("data.csv", "r");
    if (file == NULL) {
        printf("Unable to open the file.\n");
        return 0;
    }

    char line[MAX_LINE_LENGTH];
    int count = 0;
    while (fgets(line, sizeof(line), file)) {
        char *token;
        token = strtok(line, ",");
        logEntries[count].entryNo = atoi(token);

        token = strtok(NULL, ",");
        strcpy(logEntries[count].sensorNo, token);

        token = strtok(NULL, ",");
        logEntries[count].temperature = atof(token);

        token = strtok(NULL, ",");
        logEntries[count].humidity = atoi(token);

        token = strtok(NULL, ",");
        logEntries[count].light = atoi(token);

        token = strtok(NULL, ",");
        strcpy(logEntries[count].timestamp, token);

        count++;
    }

    fclose(file);
    return count;
}

// Function to display the contents of the array of structures
void displayLogEntries(LogEntry logEntries[], int count) {
    printf("EntryNo\tSensorNo\tTemperature\tHumidity\tLight\tTimestamp\n");
    for (int i = 0; i < count; i++) {
        printf("%d\t%s\t\t%.2f\t\t%d\t\t%d\t%s\n",
               logEntries[i].entryNo,
               logEntries[i].sensorNo,
               logEntries[i].temperature,
               logEntries[i].humidity,
               logEntries[i].light,
               logEntries[i].timestamp);
    }
}

int main() {
    LogEntry logEntries[MAX_ENTRIES];
    int count = extractDataFromFile(logEntries);
    if (count > 0) {
        displayLogEntries(logEntries, count);
    }
    return 0;
}

